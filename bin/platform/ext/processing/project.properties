# -----------------------------------------------------------------------
# [y] hybris Platform
#
# Copyright (c) 2017 SAP SE or an SAP affiliate company.  All rights reserved.
#
# This software is the confidential and proprietary information of SAP
# ("Confidential Information"). You shall not disclose such Confidential
# Information and shall use it only in accordance with the terms of the
# license agreement you entered into with SAP.
# -----------------------------------------------------------------------
# you can put key/value pairs here.
# Use Config.getParameter(..) to retrieve the values during runtime.

# Specifies the location of the spring context file putted automatically to the global platform application context.
processing.application-context=processing-spring.xml,cronjob-spring.xml,task-spring.xml,processengine-spring.xml,processing-jmx-spring.xml,processing-distributed-spring.xml

# -----------------------------------------------------------------------
# Node configuration
# -----------------------------------------------------------------------

# Allows to exclude a set of cluster nodes from running the task engine.
# Even without enabled engine it is possible to schedule new tasks on such
# nodes. The only difference is that they must be performed by other nodes. 

#task.excluded.cluster.ids=1,4,12

# -----------------------------------------------------------------------
# Worker configuration
# -----------------------------------------------------------------------

# The maximum number of workers to be used for performing tasks. 
task.workers.max=10

# The time to keep a idle worker alive before removing it from pool.
task.workers.idle=20

# -----------------------------------------------------------------------
# Polling configuration
# -----------------------------------------------------------------------

# The time between two attempts for getting new tasks to perform.
task.polling.interval=10

#the amount of time (in seconds) waiting for completion of all tasks during shutdown process (see DefaultTaskService.destroy()) 
tasks.shutdown.wait=15

#enables task processing, 'true' by default, setting it to 'false' disables it (tasks and cronjobs will not be executed on the current node)
task.engine.loadonstartup=true

#allows to specify how many tasks are queried. #workers variable can be used to get number of current worker threads 
task.engine.query.tasks.count=#workers * 200

#allows to specify how many conditions are queried. #workers variable can be used to get number of current worker threads
task.engine.query.conditions.count=#workers * 200

# allows to specify (in seconds) the minimal interval for polling the database for new tasks;
# if the polling is executed more frequently, the tasks buffered from last poll will be used until the interval is assured
task.polling.interval.min=10

# allows you to specify (in seconds) the interval of count queries executed to report statistics of tasks to be executed
# default value is -1 which means no count queries is executed
# value 0 means that query will be executed with the polling query  
task.queue.size.reporting.interval=60

# If set to true forces task engine to process only task assigned to the same node on which task engine is running.
# Default value is false
task.engine.exclusive.mode=false

#processengine
processengine.process.log.pattern=%-5p %X{RemoteAddr}%X{Tenant}[%c{1}] %m%n


# -----------------------------------------------------------------------
# Distributed Processes internal settings
# -----------------------------------------------------------------------
#
# Since distributed processes run fully asynchronous there can be a small delay between 
# status changes become visible in both process and task item (due to cache invalidation 
# being iterative). To mitigate a wait delay can be defined in milliseconds:    
#
distributed.processes.transitions.stale.status.max.wait=10000

#
# Switching distributed process status may require several attempts due to its asynchronous 
# nature. This setting defines the maximum allowed number of retries.
#
distributed.processes.transitions.max.retries=5

# -----------------------------------------------------------------------
# Simple Template for Distributed Processes settings
# -----------------------------------------------------------------------

distributed.process.simple.template.max.batch.retries=3
distributed.process.simple.template.batch.size=100

keygen.distributed.process.code.name=ext.processing
keygen.distributed.process.code.digits=8
keygen.distributed.process.code.start=00000000
keygen.distributed.process.code.type=alphanumeric
keygen.distributed.process.code.template=$


# secure media folder
media.folder.cronjob.secured=true